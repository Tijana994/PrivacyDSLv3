<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="privacyModel" nsURI="http://privacymodel" nsPrefix="privacyModel">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrivacyPolicy" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="UniquePolicyStatementName UniquePrincipalNamePerType UniquePrivacyDataName UniqueServiceName UniqueProviderName UniqueDocumentName UniqueConsentName UniqueComplaintName UniqueLocationPerType ProtectionControlShouldExistsInConfiguration OwnerShouldHaveDefinedInhabits"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="UniquePolicyStatementName" value="Tuple {&#xA;&#x9;message : String = 'PolicyStatement name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.policyStatements->forAll(st1:PolicyStatement,st2:PolicyStatement| st1.name = st2.name implies st1 = st2)&#xA;}.status"/>
      <details key="UniquePrincipalNamePerType" value="Tuple {&#xA;&#x9;message : String = 'Principal name per type is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allPrincipals->forAll(pr1:Principal,pr2:Principal| &#xA;&#x9;&#x9;&#x9;if(pr1.type = pr2.type) then &#xA;&#x9;&#x9;&#x9;pr1.name = pr2.name implies pr1 = pr2&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;)&#xA;}.status"/>
      <details key="UniquePrivacyDataName" value="Tuple {&#xA;&#x9;message : String = 'PrivacyData name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allDatas->forAll(data1:PrivacyData,data2:PrivacyData| data1.name = data2.name implies data1 = data2)&#xA;}.status"/>
      <details key="UniqueServiceName" value="Tuple {&#xA;&#x9;message : String = 'Service name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allServices->forAll(service1:Service,service2:Service| service1.name = service2.name implies service1 = service2)&#xA;}.status"/>
      <details key="UniqueProviderName" value="Tuple {&#xA;&#x9;message : String = 'Provider name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allProviders->forAll(provider1:Provider,provider2:Provider| provider1.name = provider2.name implies provider1 = provider2)&#xA;}.status"/>
      <details key="UniqueDocumentName" value="Tuple {&#xA;&#x9;message : String = 'Document name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allDocuments->forAll(document1:Document,document2:Document| document1.name = document2.name implies document1 = document2)&#xA;}.status"/>
      <details key="UniqueConsentName" value="Tuple {&#xA;&#x9;message : String = 'Consent name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allConsents->forAll(consent1:Consent,consent2:Consent| consent1.name = consent2.name implies consent1 = consent2)&#xA;}.status"/>
      <details key="UniqueComplaintName" value="Tuple {&#xA;&#x9;message : String = 'Complaint name is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.allComplaints->forAll(complaint1:Complaint,complaint2:Complaint| complaint1.name = complaint2.name implies complaint1 = complaint2)&#xA;}.status"/>
      <details key="UniqueLocationPerType" value="Tuple {&#xA;&#x9;message : String = 'Location name per type is unique',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;self.locations->forAll(loc1:Location,loc2:Location| &#xA;&#x9;&#x9;&#x9;if(loc1.type = loc2.type) then &#xA;&#x9;&#x9;&#x9;&#x9;loc1.name = loc2.name implies loc1 = loc2&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;)&#xA;}.status"/>
      <details key="ProtectionControlShouldExistsInConfiguration" value="Tuple {&#xA;&#x9;message : String = 'Protection controls should be defined in configuration.',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.defaultProtectionControls->forAll(protectionControl:String|&#xA;&#x9;&#x9;&#x9;&#x9;self.privacyPolicyHelper.isPolicyControlValid(protectionControl)&#xA;&#x9;&#x9;&#x9;)&#xA;}.status"/>
      <details key="OwnerShouldHaveDefinedInhabits" value="Tuple {&#xA;&#x9;message : String = 'Based on Art 3',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;not(self.owner.inhabits = null)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="policyStatements" upperBound="-1"
        eType="#//PolicyStatement" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="owner" lowerBound="1" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allPrincipals" upperBound="-1"
        eType="#//Principal" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="locations" upperBound="-1"
        eType="#//Location" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultProtectionControls"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allServices" upperBound="-1"
        eType="#//Service" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allProviders" upperBound="-1"
        eType="#//Provider" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="configurationManager" lowerBound="1"
        eType="#//ConfigurationManager" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allDatas" upperBound="-1"
        eType="#//PrivacyData" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allComplaints" upperBound="-1"
        eType="#//Complaint" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="privacyPolicyHelper" lowerBound="1"
        eType="#//PrivacyPolicyHelper" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allDenials" upperBound="-1"
        eType="#//Denial" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allConsents" upperBound="-1"
        eType="#//Consent" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="allDocuments" upperBound="-1"
        eType="#//Document" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="notifications" upperBound="-1"
        eType="#//Notification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PolicyStatement" eSuperTypes="#//NotificationInfo">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DateShoudBeDefinedForAccessAction DateShoudBeDefinedForStoreAction MissingConsentForCollecting UndefinedPurposeForAction ExpiredConsent WithdrawedConsent JuvenileDataShouldBeUsedWithDocumentOfTypeChildCustodyProvidedByResponsiblePerson SubjectShouldBeNotifiedAboutCollecting"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="DateShoudBeDefinedForAccessAction" value="Tuple {&#xA;&#x9;message : String = 'Date shoud be defined',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;dateShouldBeDefinedForType(Action::Access)&#xA;}.status"/>
      <details key="DateShoudBeDefinedForStoreAction" value="Tuple {&#xA;&#x9;message : String = 'Date shoud be defined',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;dateShouldBeDefinedForType(Action::Store)&#xA;}.status"/>
      <details key="MissingConsentForCollecting" value="Tuple {&#xA;&#x9;message : String = 'Based on Art6',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(self.whose = null or not(self.what.actions->exists(action| action = Action::Collecting)) or &#xA;&#x9;&#x9;&#x9;&#x9;(what.datas->exists(data| data.colllectedFromSubject = false) and self.what.actions->exists(action| action = Action::Collecting))&#xA;&#x9;&#x9;&#x9;) then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else if(self.whose.type = PrincipalType::NaturalPerson and self.whose.age &lt; PrivacyPolicy.allInstances()->asSequence()->first().owner.inhabits.legalAgeLimit) then&#xA;&#x9;&#x9;&#x9;&#x9;not(self.how.consent = null) and self.whose.responsiblePersons->exists(person| self.how.consent.providedBy)&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;not(self.how.consent = null) and (self.how.consent.providedBy = self.whose or self.whose.responsiblePersons->exists(person| self.how.consent.providedBy))&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="UndefinedPurposeForAction" value="Tuple {&#xA;&#x9;message : String = 'Based on Art6',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(self.whose = null or self.what.actions->exists(act| act = Action::Collecting)) then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;let privacyPolicy : PrivacyPolicy = PrivacyPolicy.allInstances()->asSequence()->first() in&#xA;&#x9;&#x9;&#x9;&#x9;self.what.datas->forAll(data: PrivacyData|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let statements : PolicyStatement[*|?] = privacyPolicy.policyStatements->select(st: PolicyStatement| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(st.whose = null) and st.whose = self.whose and self.who.equals(st.who) and st.what.actions->exists(act| act = Action::Collecting) and st.what.datas->exists(d| d = data))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(statements->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;statements -> forAll(st: PolicyStatement|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(privacyPolicy.privacyPolicyHelper.areIntervalsOverlap(self.when, st.when)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.why = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.why.isValid(st.why) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::PublicInterest and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::CourtApproval)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::LegitimateInterests and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::ProtectTheVitalInterestsOfTheDataSubject and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval)))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="ExpiredConsent" value="Tuple {&#xA;&#x9;message : String = 'Based on Art6',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(self.whose = null or self.what.actions->exists(act| act = Action::Collecting)) then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;let privacyPolicy : PrivacyPolicy = PrivacyPolicy.allInstances()->asSequence()->first() in&#xA;&#x9;&#x9;&#x9;&#x9;self.what.datas->forAll(data: PrivacyData|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let statements : PolicyStatement[*|?] = privacyPolicy.policyStatements->select(st: PolicyStatement| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(st.whose = null) and st.whose = self.whose and self.who.equals(st.who) and st.what.actions->exists(act| act = Action::Collecting) and st.what.datas->exists(d| d = data))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(statements->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;statements -> forAll(st: PolicyStatement|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(privacyPolicy.privacyPolicyHelper.areIntervalsOverlap(self.when, st.when)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.why = null &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::PublicInterest and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::CourtApproval)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::LegitimateInterests and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::ProtectTheVitalInterestsOfTheDataSubject and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;privacyPolicy.privacyPolicyHelper.isDateInInterval(self.when, st.how.consent.startDate) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(st.how.consent.terminationDate = null or not(privacyPolicy.privacyPolicyHelper.isDateBeforeInterval(self.when, st.how.consent.terminationDate)))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="WithdrawedConsent" value="Tuple {&#xA;&#x9;message : String = 'Based on Art7',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(self.whose = null or self.what.actions->exists(act| act = Action::Collecting)) then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;let privacyPolicy : PrivacyPolicy = PrivacyPolicy.allInstances()->asSequence()->first() in&#xA;&#x9;&#x9;&#x9;&#x9;self.what.datas->forAll(data: PrivacyData|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let statements : PolicyStatement[*|?] = privacyPolicy.policyStatements->select(st: PolicyStatement| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(st.whose = null) and st.whose = self.whose and self.who.equals(st.who) and st.what.actions->exists(act| act = Action::Collecting) and st.what.datas->exists(d| d = data))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(statements->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;statements -> forAll(st: PolicyStatement|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(privacyPolicy.privacyPolicyHelper.areIntervalsOverlap(self.when, st.when)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.why = null &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::PublicInterest and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::CourtApproval)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::LegitimateInterests and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.why.processingReason = ProcessingReason::ProtectTheVitalInterestsOfTheDataSubject and not(self.how = null) and self.how.documents->exists(doc| doc.documentType = DocumentType::ControllerApproval))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(privacyPolicy.allComplaints->exists(complaint| complaint.action.oclIsTypeOf(Withdraw) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let withdrawal: Withdraw = complaint.action.oclAsType(Withdraw) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;withdrawal.subject = st.how.consent&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="JuvenileDataShouldBeUsedWithDocumentOfTypeChildCustodyProvidedByResponsiblePerson"
          value="Tuple {&#xA;&#x9;message : String = 'Based on Art8',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(self.whose = null or not(self.what.actions->exists(action| action = Action::Collecting))) then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else if(self.whose.type = PrincipalType::NaturalPerson and self.whose.age &lt; PrivacyPolicy.allInstances()->asSequence()->first().owner.inhabits.legalAgeLimit) then&#xA;&#x9;&#x9;&#x9;&#x9;if(self.how = null or self.whose.responsiblePersons->isEmpty() or self.how.documents->isEmpty() or &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;not(self.how.documents->exists(document| document.documentType = DocumentType::ChildCustody and self.whose.responsiblePersons->exists(p|p=document.providedBy)))&#xA;&#x9;&#x9;&#x9;&#x9;) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="SubjectShouldBeNotifiedAboutCollecting" value="Tuple {&#xA;&#x9;message : String = 'Based on Art14',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(not(self.why = null) and &#xA;&#x9;&#x9;&#x9;&#x9;(self.why.containsAllowedPurposeReasonAndSubreason(ProcessingReason::PublicInterest,Sequence{ProcessingReasonSubtype::None}) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.why.containsAllowedPurposeReasonAndSubreason(ProcessingReason::Research,Sequence{ProcessingReasonSubtype::Statistical, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::Historical,ProcessingReasonSubtype::Scientific}))&#xA;&#x9;&#x9;&#x9;&#x9;)then&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(what.actions->exists(action| action = Action::Collecting) and what.datas->exists(data| data.colllectedFromSubject = false)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PrivacyPolicy.allInstances()->asSequence()->first().notifications->exists(notification| notification.causedBy = self)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="dateShouldBeDefinedForType" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.what = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.what.actions->exists(act| act = actionType)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(self.when = null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="actionType" lowerBound="1" eType="#//Action"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//PrivacyStatementType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="when" eType="#//AbstractTime"
        containment="true">
      <eAnnotations source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData">
        <details key="name" value="when"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="who" lowerBound="1" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="why" eType="#//Purpose"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="what" lowerBound="1" eType="#//What"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="how" eType="#//How" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="whose" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="whom" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="where" eType="#//Where"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="causedBy" eType="#//Complaint"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrivacyData" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//DataType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Service" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="subservices" upperBound="-1"
        eType="#//Service"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Provider" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="provide" upperBound="-1"
        eType="#//Service"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="located" lowerBound="1"
        eType="#//Location"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Principal" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="NaturalPersonCanNotConatainsSubPrincipals JuvenileShouldHaveResponsiblePerson"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="NaturalPersonCanNotConatainsSubPrincipals" value="&#xA;&#x9;&#x9;&#x9;if(self.type = PrincipalType::NaturalPerson) then&#xA;&#x9;&#x9;&#x9;&#x9;self.subPrincipals->isEmpty()&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif"/>
      <details key="JuvenileShouldHaveResponsiblePerson" value="Tuple {&#xA;&#x9;message : String = 'Based on Art8',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;if(self.type = PrincipalType::NaturalPerson and self.age &lt; PrivacyPolicy.allInstances()->asSequence()->first().owner.inhabits.legalAgeLimit) then&#xA;&#x9;&#x9;&#x9;&#x9;not(self.responsiblePersons->isEmpty())&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="equals" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(self = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self = observed or self.subPrincipals->exists(principal| principal = observed)&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="observed" eType="#//Principal"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subPrincipals" upperBound="-1"
        eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//PrincipalType"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="scope" lowerBound="1" eType="#//PrincipalScope"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="responsiblePersons" upperBound="-1"
        eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inhabits" eType="#//Location"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="birthdate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="age" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        derived="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="PrivacyStatementType">
    <eLiterals name="Permission"/>
    <eLiterals name="Obligation" value="1"/>
    <eLiterals name="Information" value="2"/>
    <eLiterals name="Optional" value="3"/>
    <eLiterals name="Prohibition" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="DataType">
    <eLiterals name="Biometric"/>
    <eLiterals name="General" value="1"/>
    <eLiterals name="Genetic" value="2"/>
    <eLiterals name="PoliticalOpinion" value="3"/>
    <eLiterals name="RacialEthnicOrigin" value="4"/>
    <eLiterals name="Beliefs" value="5"/>
    <eLiterals name="SexLife" value="6"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Location" eSuperTypes="#//NamedElement">
    <eOperations name="equals" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(self = observed) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;  else &#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;self.subLocations->notEmpty() and self.subLocations->exists(s| s.equals(observed))&#xA;&#x9;&#x9;&#x9;&#x9;  endif"/>
      </eAnnotations>
      <eParameters name="observed" eType="#//Location"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isEUMember" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//LocationType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subLocations" upperBound="-1"
        eType="#//Location"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="legalAgeLimit" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt" defaultValueLiteral="16"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="DocumentType">
    <eLiterals name="ChildCustody"/>
    <eLiterals name="CourtApproval" value="1"/>
    <eLiterals name="ControllerApproval" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractTime" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="TimeInterval" eSuperTypes="#//AbstractTime">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="OnlyAfterOrAfterWithBefore OnlyFromOrFromWithTo AtTypeShouldBeDefinedAlone UntilTypeShouldBeDefinedAlone AfterStatementBeforeBeforeStatement FromStatementBeforeToStatement"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="OnlyAfterOrAfterWithBefore" value="Tuple {&#xA;&#x9;message : String = 'After interval should be defined alone or with before interval',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isTypeDefinedWithOtherType(TimePreposition::after, TimePreposition::before)&#xA;}.status"/>
      <details key="OnlyFromOrFromWithTo" value="Tuple {&#xA;&#x9;message : String = 'From interval should be defined alone or with to interval',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isTypeDefinedWithOtherType(TimePreposition::from, TimePreposition::to)&#xA;}.status"/>
      <details key="AtTypeShouldBeDefinedAlone" value="Tuple {&#xA;&#x9;message : String = 'At statement should be defined alone',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isTypeForbidden(TimePreposition::at)&#xA;}.status"/>
      <details key="UntilTypeShouldBeDefinedAlone" value="Tuple {&#xA;&#x9;message : String = 'Until statement should be defined alone',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isTypeForbidden(TimePreposition::until)&#xA;}.status"/>
      <details key="AfterStatementBeforeBeforeStatement" value="Tuple {&#xA;&#x9;message : String = 'After interval should be defined before before interval',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isValid(TimePreposition::after, TimePreposition::before)&#xA;}.status"/>
      <details key="FromStatementBeforeToStatement" value="Tuple {&#xA;&#x9;message : String = 'From interval should be defined before to interval',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.isValid(TimePreposition::from, TimePreposition::to)&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="isTypeDefinedWithOtherType" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;if(self.start.preposition = firstPrepositionType) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;self.end.preposition = secondPrepositionType&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="firstPrepositionType" lowerBound="1" eType="#//TimePreposition"/>
      <eParameters name="secondPrepositionType" lowerBound="1" eType="#//TimePreposition"/>
    </eOperations>
    <eOperations name="isTypeForbidden" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.start.preposition = prepositionType or self.end.preposition = prepositionType) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="prepositionType" lowerBound="1" eType="#//TimePreposition"/>
    </eOperations>
    <eOperations name="isValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.start.preposition = firstPrepositionType and self.end.preposition = secondPrepositionType) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.start.dateTime &lt; self.end.dateTime&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.end.preposition = firstPrepositionType and self.start.preposition = secondPrepositionType) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="firstPrepositionType" lowerBound="1" eType="#//TimePreposition"/>
      <eParameters name="secondPrepositionType" lowerBound="1" eType="#//TimePreposition"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="start" lowerBound="1" eType="#//TimeStatement"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="end" lowerBound="1" eType="#//TimeStatement"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TimeStatement" eSuperTypes="#//AbstractTime">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="preposition" lowerBound="1"
        eType="#//TimePreposition"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="dateTime" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="TimePreposition">
    <eLiterals name="from"/>
    <eLiterals name="to" value="1"/>
    <eLiterals name="at" value="2"/>
    <eLiterals name="until" value="3"/>
    <eLiterals name="before" value="4"/>
    <eLiterals name="after" value="5"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="PrincipalType">
    <eLiterals name="LegalEntity"/>
    <eLiterals name="NaturalPerson" value="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="PrincipalScope">
    <eLiterals name="In"/>
    <eLiterals name="Out" value="1"/>
    <eLiterals name="Unknown" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="Action">
    <eLiterals name="Store"/>
    <eLiterals name="Access" value="1"/>
    <eLiterals name="Collecting" value="2"/>
    <eLiterals name="Profiling" value="6"/>
    <eLiterals name="Erasure" value="7"/>
    <eLiterals name="Rectification" value="8"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="LocationType">
    <eLiterals name="Union"/>
    <eLiterals name="Country" value="1"/>
    <eLiterals name="Region" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Purpose">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ResearchCannotContainsThisSubReason PublicHealthShouldNotContainSubReason OutOfScopeCannotContainsThisSubReason PublicInterestShouldNotContainSubReason StatisticalPurposesShouldNotContainSubReason ExercisingSpecificRightsPurposesCannotContainsThisSubReason MarketingShouldNotContainSubReason TestingShouldNotContainSubReason ProfilingShouldNotContainSubReason ProtectTheVitalInterestsOfTheDataSubjectCannotContainsThisSubReason"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="ResearchCannotContainsThisSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::Research, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None, ProcessingReasonSubtype::Other, ProcessingReasonSubtype::Scientific, ProcessingReasonSubtype::Historical,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::Statistical&#xA;&#x9;&#x9;&#x9;&#x9;})"/>
      <details key="PublicHealthShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::PublicHealth, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="OutOfScopeCannotContainsThisSubReason" value="&#xA;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::OutOfScope, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::Prevention,ProcessingReasonSubtype::Investigation,ProcessingReasonSubtype::Detection,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::Prosecution, ProcessingReasonSubtype::PreventionOfThreats, ProcessingReasonSubtype::OutOfEU,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::PersonalActivity, ProcessingReasonSubtype::SpecialScopeOfActivity, ProcessingReasonSubtype::None,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::Other&#xA;&#x9;&#x9;&#x9;&#x9;})"/>
      <details key="PublicInterestShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::PublicInterest, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="StatisticalPurposesShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::StatisticalPurposes, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="ExercisingSpecificRightsPurposesCannotContainsThisSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::ExercisingSpecificRights, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::Employment, ProcessingReasonSubtype::SocialSecurity,ProcessingReasonSubtype::SocialProtection, &#xA;&#x9;&#x9;&#x9;&#x9;ProcessingReasonSubtype::None, ProcessingReasonSubtype::Other})"/>
      <details key="MarketingShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::Marketing, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="TestingShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::Testing, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="ProfilingShouldNotContainSubReason" value="&#xA;&#x9;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::Profiling, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::None})"/>
      <details key="ProtectTheVitalInterestsOfTheDataSubjectCannotContainsThisSubReason"
          value="&#xA;&#x9;&#x9;&#x9;isSubPurposeValid(ProcessingReason::ProtectTheVitalInterestsOfTheDataSubject, &#xA;&#x9;&#x9;&#x9;&#x9;Sequence{ProcessingReasonSubtype::PhisicallyIncapable,ProcessingReasonSubtype::LegallyIncapable, ProcessingReasonSubtype::Other, ProcessingReasonSubtype::None})"/>
    </eAnnotations>
    <eOperations name="isValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.processingReason = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if(self.processingReasonSubtype = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(not(purpose.processingReason = null) and self.processingReason = purpose.processingReason) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.subPurposes->notEmpty() and self.subPurposes->exists(s| s.isValid(purpose)))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(not(purpose.processingReason = null) and not(purpose.processingReasonSubtype = null) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and self.processingReason = purpose.processingReason and self.processingReasonSubtype = purpose.processingReasonSubtype)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(self.subPurposes->notEmpty() and self.subPurposes->exists(s| s.isValid(purpose)))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="purpose" eType="#//Purpose"/>
    </eOperations>
    <eOperations name="isSubPurposeValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(self.processingReason = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;  else &#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;if(self.processingReason = reason) then&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;if(self.processingReasonSubtype = null) then&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;&#x9;subreasons->exists(r| r = self.processingReasonSubtype)&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;  &#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  endif"/>
      </eAnnotations>
      <eParameters name="reason" eType="#//ProcessingReason"/>
      <eParameters name="subreasons" unique="false" upperBound="-1" eType="#//ProcessingReasonSubtype"/>
    </eOperations>
    <eOperations name="containsAllowedPurposeReasonAndSubreason" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="allowedReason = self.processingReason and allowedSubreasons->exists(r| r = self.processingReasonSubtype)"/>
      </eAnnotations>
      <eParameters name="allowedReason" lowerBound="1" eType="#//ProcessingReason"/>
      <eParameters name="allowedSubreasons" unique="false" upperBound="-1" eType="#//ProcessingReasonSubtype"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="processingReason" lowerBound="1"
        eType="#//ProcessingReason"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="processingReasonSubtype"
        lowerBound="1" eType="#//ProcessingReasonSubtype"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subPurposes" upperBound="-1"
        eType="#//Purpose" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ProcessingReason">
    <eLiterals name="Research"/>
    <eLiterals name="PublicHealth" value="1"/>
    <eLiterals name="OutOfScope" value="2"/>
    <eLiterals name="PublicInterest" value="3"/>
    <eLiterals name="StatisticalPurposes" value="4"/>
    <eLiterals name="ExercisingSpecificRights" value="5"/>
    <eLiterals name="Marketing" value="6"/>
    <eLiterals name="Testing" value="7"/>
    <eLiterals name="Profiling" value="8"/>
    <eLiterals name="ProtectTheVitalInterestsOfTheDataSubject" value="9"/>
    <eLiterals name="LegitimateInterests" value="10"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ProcessingReasonSubtype">
    <eLiterals name="None"/>
    <eLiterals name="Prevention" value="1"/>
    <eLiterals name="Investigation" value="2"/>
    <eLiterals name="Detection" value="3"/>
    <eLiterals name="Prosecution" value="4"/>
    <eLiterals name="PreventionOfThreats" value="5"/>
    <eLiterals name="OutOfEU" value="6"/>
    <eLiterals name="PersonalActivity" value="7"/>
    <eLiterals name="SpecialScopeOfActivity" value="8"/>
    <eLiterals name="Employment" value="9"/>
    <eLiterals name="SocialSecurity" value="10"/>
    <eLiterals name="SocialProtection" value="11"/>
    <eLiterals name="PhisicallyIncapable" value="12"/>
    <eLiterals name="LegallyIncapable" value="13"/>
    <eLiterals name="Statistical" value="14"/>
    <eLiterals name="Historical" value="15"/>
    <eLiterals name="Scientific" value="16"/>
    <eLiterals name="Other" value="17"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="What">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="actions" lowerBound="1"
        upperBound="-1" eType="#//Action"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="providers" upperBound="-1"
        eType="#//Provider"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="datas" upperBound="-1"
        eType="#//SharedPrivacyData" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="How">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="DataSourceShouldExistsInConfiguration"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="DataSourceShouldExistsInConfiguration" value="Tuple {&#xA;&#x9;message : String = 'Data source should be defined in configuration.',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;PrivacyPolicy.allInstances()->asSequence()->first().privacyPolicyHelper.isDataSourceValid(self.dataSource)&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="isConsentValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.consent = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if(howConsent.consent = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.consent = howConsent.consent&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="howConsent" eType="#//How"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="documents" upperBound="-1"
        eType="#//Document"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="consent" eType="#//Consent"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="dataSource" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Consent" eSuperTypes="#//AbstractPaper">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="format" eType="#//ConsentFormat"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//ConsentType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConfigurationManager">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="dataSources" upperBound="-1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="protectionControlMethods"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Complaint" eSuperTypes="#//NotificationInfo">
    <eStructuralFeatures xsi:type="ecore:EReference" name="who" lowerBound="1" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="when" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="reason" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="action" lowerBound="1"
        eType="#//AbstractComplaintAction" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrivacyPolicyHelper">
    <eOperations name="isPolicyControlValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="PrivacyPolicy.allInstances()->asSequence()->first().configurationManager.protectionControlMethods->exists(q | q = policyControl)"/>
      </eAnnotations>
      <eParameters name="policyControl" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="isDataSourceValid" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="PrivacyPolicy.allInstances()->asSequence()->first().configurationManager.dataSources->exists(q | q = dataSource)"/>
      </eAnnotations>
      <eParameters name="dataSource" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="areIntervalsOverlap" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(time2.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time2.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::from or timestmt.preposition = TimePreposition::after or timestmt.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;areDatesOverlap(time1, timestmt.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(areDatesOverlap(time1, timestmt.dateTime))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = time2.oclAsType(TimeInterval) in&#xA;&#x9;&#x9;&#x9;  &#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after or interval.start.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;areDatesOverlap(time1, interval.start.dateTime) and not(areDatesOverlap(time1, interval.end.dateTime))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(areDatesOverlap(time1, interval.start.dateTime)) and areDatesOverlap(time1, interval.end.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  endif"/>
      </eAnnotations>
      <eParameters name="time1" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="time2" lowerBound="1" eType="#//AbstractTime"/>
    </eOperations>
    <eOperations name="areDatesOverlap" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;if(time.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::from or timestmt.preposition = TimePreposition::after or timestmt.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(timestmt.dateTime &lt; date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(timestmt.dateTime > date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = time.oclAsType(TimeInterval) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(interval.start.dateTime &lt; date) and (not(interval.end.dateTime > date))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(interval.start.dateTime > date) and (not(interval.end.dateTime &lt; date))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="time" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="date" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    </eOperations>
    <eOperations name="doesIntervalStartBeforeInterval" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(startInterval.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = startInterval.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::from or timestmt.preposition = TimePreposition::after or timestmt.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isDateBeforeInterval(finishInterval, timestmt.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(isDateBeforeInterval(finishInterval, timestmt.dateTime))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = startInterval.oclAsType(TimeInterval) in&#xA;&#x9;&#x9;&#x9;  &#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after or interval.start.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isDateBeforeInterval(finishInterval, interval.start.dateTime) and not(isDateBeforeInterval(finishInterval, interval.end.dateTime))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(isDateBeforeInterval(finishInterval, interval.start.dateTime)) and isDateBeforeInterval(finishInterval, interval.end.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;  endif"/>
      </eAnnotations>
      <eParameters name="startInterval" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="finishInterval" lowerBound="1" eType="#//AbstractTime"/>
    </eOperations>
    <eOperations name="isDateBeforeInterval" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;if(time.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::from or timestmt.preposition = TimePreposition::after or timestmt.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;date &lt; timestmt.dateTime&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timestmt.dateTime &lt; date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = time.oclAsType(TimeInterval) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.dateTime &lt; interval.end.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;interval.start.dateTime > date and interval.end.dateTime > date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.end.dateTime &lt; interval.start.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;interval.start.dateTime > date and interval.end.dateTime > date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="time" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="date" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    </eOperations>
    <eOperations name="isDateAfterInterval" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;if(time.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::to or timestmt.preposition = TimePreposition::before or timestmt.preposition = TimePreposition::until) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timestmt.dateTime > date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timestmt.dateTime &lt; date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = time.oclAsType(TimeInterval) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.dateTime &lt; interval.end.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;interval.start.dateTime &lt; date and interval.end.dateTime &lt; date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.end.dateTime &lt; interval.start.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;interval.start.dateTime &lt; date and interval.end.dateTime &lt; date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="time" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="date" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    </eOperations>
    <eOperations name="isDateInInterval" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;if(time.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time.oclAsType(TimeStatement) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(timestmt.preposition = TimePreposition::at) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timestmt.dateTime = date&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if(timestmt.preposition = TimePreposition::to or timestmt.preposition = TimePreposition::before or timestmt.preposition = TimePreposition::until) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(timestmt.dateTime > date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(timestmt.dateTime &lt; date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let interval : TimeInterval = time.oclAsType(TimeInterval) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.preposition = TimePreposition::from or interval.start.preposition = TimePreposition::after) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.start.dateTime &lt; interval.end.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(interval.start.dateTime &lt; date) and not(interval.end.dateTime > date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(date &lt; interval.end.dateTime) and not(date > interval.start.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(interval.end.dateTime &lt; interval.start.dateTime) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(interval.end.dateTime &lt; date) and not(interval.start.dateTime > date)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not(date &lt; interval.start.dateTime) and not(date > interval.end.dateTime)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="time" lowerBound="1" eType="#//AbstractTime"/>
      <eParameters name="date" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    </eOperations>
    <eOperations name="startTime" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if(time.oclIsKindOf(TimeStatement)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let timestmt : TimeStatement = time.oclAsType(TimeStatement) in timestmt.dateTime&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;let interval : TimeInterval = time.oclAsType(TimeInterval) in interval.start.dateTime&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;endif"/>
      </eAnnotations>
      <eParameters name="time" lowerBound="1" eType="#//AbstractTime"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Where">
    <eOperations name="equals" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.source = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.destination = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(observed.destination = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.destination.equals(observed.destination)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.destination = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(observed.source = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.source.equals(observed.source)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(observed.destination = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(observed.source = null) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.source.equals(observed.source) and self.destination.equals(observed.destination)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif"/>
      </eAnnotations>
      <eParameters name="observed" eType="#//Where"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" eType="#//Location"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="destination" eType="#//Location"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ConsentFormat">
    <eLiterals name="Written"/>
    <eLiterals name="Verbal" value="1"/>
    <eLiterals name="NonVerbal" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Document" eSuperTypes="#//AbstractPaper">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="documentType" eType="#//DocumentType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractPaper" abstract="true" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="StartDateShouldBeBeforeTerminationDate"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="StartDateShouldBeBeforeTerminationDate" value="Tuple {&#xA;&#x9;message : String = 'Terminationdate is after startdate!',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;not(self.startDate > self.terminationDate)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="providedBy" lowerBound="1"
        eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="terminationExplanation"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="startDate" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="terminationDate" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileLocation" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="description" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractComplaintAction" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="Withdraw" eSuperTypes="#//AbstractComplaintAction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="subject" lowerBound="1"
        eType="#//Consent"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ComplaintBasedOnData" eSuperTypes="#//AbstractComplaintAction">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ComplaintShouldBeExecutedAsSoonAsPossible"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="ComplaintShouldBeExecutedAsSoonAsPossible" value="Tuple {&#xA;&#x9;message : String = 'Based on Art16 and Art17',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;(isExecuted or not(denialReason = null))&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="execute"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="subject" lowerBound="1"
        upperBound="-1" eType="#//PrivacyData"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//ComplaintBasedOnDataType"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isExecuted" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="denialReason" eType="#//Denial"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ConsentType">
    <eLiterals name="Explicit"/>
    <eLiterals name="Implied" value="1"/>
    <eLiterals name="Informed" value="2"/>
    <eLiterals name="Unanomius" value="3"/>
    <eLiterals name="Substituted" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SharedPrivacyData">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ProtectionControlShouldExistsInConfiguration"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="ProtectionControlShouldExistsInConfiguration" value="Tuple {&#xA;&#x9;message : String = 'Protection controls should be defined in configuration.',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;self.additionalProtectionControls->forAll(protectionControl:String|&#xA;&#x9;&#x9;&#x9;&#x9;PrivacyPolicy.allInstances()->asSequence()->first().privacyPolicyHelper.isPolicyControlValid(protectionControl)&#xA;&#x9;&#x9;&#x9;)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="additionalProtectionControls"
        upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="privacydata" lowerBound="1"
        eType="#//PrivacyData"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="colllectedFromSubject"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Denial">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="date" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="approvedBy" lowerBound="1"
        eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="reason" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="basedOnStatements" upperBound="-1"
        eType="#//PolicyStatement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ComplaintBasedOnDataType">
    <eLiterals name="Erasure"/>
    <eLiterals name="Rectification" value="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="NotificationType">
    <eLiterals name="Erasure"/>
    <eLiterals name="Withdraw" value="1"/>
    <eLiterals name="Rectification" value="2"/>
    <eLiterals name="DataCollecting" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Notification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="ShouldDefineCausedByAsWithdraw ShouldDefineCausedByAsErasure ShouldDefineCausedByAsRectification ShouldDefineCausedByAsPrivacyPolicy"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="ShouldDefineCausedByAsWithdraw" value="Tuple {&#xA;&#x9;message : String = 'NotifyAboutWithdraw should contain causedBy with complaint Withraw',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(type = NotificationType::Withdraw) then&#xA;&#x9;&#x9;&#x9;&#x9;if(causedBy.oclIsKindOf(Complaint)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let complaint : Complaint = causedBy.oclAsType(Complaint) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;complaint.action.oclIsKindOf(Withdraw)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="ShouldDefineCausedByAsErasure" value="Tuple {&#xA;&#x9;message : String = 'NotifyAboutErasure should contain causedBy with complaint Erasure',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(type = NotificationType::Erasure) then&#xA;&#x9;&#x9;&#x9;&#x9;if(causedBy.oclIsKindOf(Complaint)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let complaint : Complaint = causedBy.oclAsType(Complaint) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(complaint.action.oclIsKindOf(ComplaintBasedOnData)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let basedOnData : ComplaintBasedOnData = complaint.action.oclAsType(ComplaintBasedOnData) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;basedOnData.type = ComplaintBasedOnDataType::Erasure&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="ShouldDefineCausedByAsRectification" value="Tuple {&#xA;&#x9;message : String = 'NotifyAboutRectification should contain causedBy with complaint Rectification',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(type = NotificationType::Rectification) then&#xA;&#x9;&#x9;&#x9;&#x9;if(causedBy.oclIsKindOf(Complaint)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let complaint : Complaint = causedBy.oclAsType(Complaint) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(complaint.action.oclIsKindOf(ComplaintBasedOnData)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let basedOnData : ComplaintBasedOnData = complaint.action.oclAsType(ComplaintBasedOnData) in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;basedOnData.type = ComplaintBasedOnDataType::Rectification&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
      <details key="ShouldDefineCausedByAsPrivacyPolicy" value="Tuple {&#xA;&#x9;message : String = 'NotifyAboutCollecting should contain causedBy with policy statement',&#xA;&#x9;status : Boolean = &#xA;&#x9;&#x9;&#x9;if(type = NotificationType::DataCollecting) then&#xA;&#x9;&#x9;&#x9;&#x9;causedBy.oclIsKindOf(PolicyStatement)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//NotificationType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="notifiers" lowerBound="1"
        upperBound="-1" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="receivers" lowerBound="1"
        upperBound="-1" eType="#//Principal"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="causedBy" lowerBound="1"
        eType="#//NotificationInfo"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="when" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NotificationInfo" abstract="true" eSuperTypes="#//NamedElement"/>
</ecore:EPackage>
